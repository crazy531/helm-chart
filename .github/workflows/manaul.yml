name: Release Charts on manaul

on: 
  workflow_dispatch:
    inputs:
      version:
        description: "The chart-releaser version to use (default: v1.6.0)"
        required: false
        default: v1.6.0
      config:
        description: "The relative path to the chart-releaser config file"
        required: false
      charts_dir:
        description: The charts directory
        required: false
        default: charts
      install_dir:
        description: "Where to install the cr tool"
        required: false
      install_only:
        description: "Just install cr tool"
        required: false
      skip_packaging:
        description: "Skip the packaging option (do your custom packaging before running this action)"
        required: false
      skip_existing:
        description: "Skip package upload if release exists"
        required: false
      mark_as_latest:
        description: Mark the created GitHub release as 'latest'
        required: false
        default: true
        type: string
      packages_with_index:
        description: "Upload chart packages directly into publishing branch"
        required: false
      pages_branch:
        description: "Name of the branch to be used to push the index and artifacts. (default to: gh-pages but it is not set in the action it is a default value for the chart-releaser binary)"
        required: false
  push:
     branches:
       - main
       - gh-pages
        
env:
 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  release:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Run chart-releaser
        run: |
          owner=$(cut -d '/' -f 1 <<< "$GITHUB_REPOSITORY")
          repo=$(cut -d '/' -f 2 <<< "$GITHUB_REPOSITORY")
          chartsdir="${{ inputs.charts_dir}}"
          args=(--owner "$owner" --repo "$repo")
          args+=(--charts-dir ${ chartsdir:-'charts'})
            
          if [[ -n "${{ inputs.version }}" ]]; then
              args+=(--version "${{ inputs.version}}")
          else 
              args+=(--version "v1.6.0")
          fi
  
          if [[ -n "${{ inputs.config }}" ]]; then
              args+=(--config "${{ inputs.config }}")
          fi
  
          if [[ -z "${{ inputs.install_dir }}" ]]; then
            install="$RUNNER_TOOL_CACHE/cr/${{ inputs.version }}/$(uname -m)"
            echo "$install" >> "$GITHUB_PATH"
            args+=(--install-dir "$install")
          else
            echo ${{ inputs.install_dir }} >> "$GITHUB_PATH"
            args+=(--install-dir "${{ inputs.install_dir }}")
          fi
  
          if [[ -n "${{ inputs.install_only }}" ]]; then
              args+=(--install-only "${{ inputs.install_only }}")
          fi
  
          if [[ -n "${{ inputs.skip_packaging }}" ]]; then
              args+=(--skip-packaging "${{ inputs.skip_packaging }}")
          fi
  
          if [[ -n "${{ inputs.skip_existing }}" ]]; then
              args+=(--skip-existing "${{ inputs.skip_existing }}")
          fi
  
          if [[ -n "${{ inputs.mark_as_latest }}" ]]; then
              args+=(--mark-as-latest "${{ inputs.mark_as_latest}}")
          else 
             args+=(--mark-as-latest true )
          fi
  
          if [[ -n "${{ inputs.packages_with_index }}" ]]; then
              args+=(--packages-with-index "${{ inputs.packages_with_index }}")
          fi
  
          if [[ -n "${{ inputs.pages_branch }}" ]]; then
              args+=(--pages-branch "${{ inputs.pages_branch }}")
          fi
          ls -la .
          echo ${args[@]}
          "./cr.sh" "${args[@]}"
  
          if [[ -f changed_charts.txt ]]; then
              cat changed_charts.txt >> "$GITHUB_OUTPUT"
          fi
          if [[ -f chart_version.txt ]]; then
              cat chart_version.txt 
          fi
          rm -f changed_charts.txt 
        shell: bash

